console.log('Starting server setup...');

const express = require('express');
const fetch = require('node-fetch');
const dotenv = require('dotenv');
const config = require('./config');

console.log('Loading environment variables...');
dotenv.config();

const app = express();
const port = config.port;
// Middleware to parse JSON bodies
console.log('Setting up middleware...');
app.use(express.json());

// CORS middleware to allow requests from your frontend
app.use((req, res, next) => {
  console.log('Applying CORS middleware...');
  const origin = req.headers.origin;
  
  // Check if origin is in allowed list
  if (origin && config.allowedOrigins.includes(origin)) {
    res.header('Access-Control-Allow-Origin', origin);
  } else {
    res.header('Access-Control-Allow-Origin', '*'); // Fallback for development
  }
  
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  
  // Handle preflight requests
  if (req.method === 'OPTIONS') {
    res.sendStatus(200);
  } else {
    next();
  }
});

// Feedback endpoint
app.post('/api/feedback', async (req, res) => {
  console.log('Received feedback request:', req.body);
  const { email, feedback, type, source } = req.body;

  if (!feedback) {
    console.log('Error: Feedback text is required');
    return res.status(400).json({ error: 'Feedback text is required' });
  }

  try {
    // 1. Send email notification
    await sendFeedbackEmail(email, feedback);
    
    // 2. Save to Google Sheets via Google Apps Script
    await saveToGoogleSheets(email, feedback, type, source);
    
    // 3. Log to console for debugging
    console.log('Feedback saved successfully:', { email, feedback, type, source, timestamp: new Date().toISOString() });
    
    res.json({ success: true, message: 'Feedback submitted successfully' });
  } catch (error) {
    console.error('Error processing feedback:', error.message);
    res.status(500).json({ error: 'Failed to process feedback' });
  }
});

// Function to send feedback email
async function sendFeedbackEmail(email, feedback) {
  try {
    // Check if email configuration is available
    const emailUser = process.env.EMAIL_USER;
    const emailPassword = process.env.EMAIL_APP_PASSWORD;
    const feedbackEmail = process.env.FEEDBACK_EMAIL;
    
    if (emailUser && emailPassword && feedbackEmail) {
      // Use Nodemailer to send email
      const nodemailer = require('nodemailer');
      
      const transporter = nodemailer.createTransporter({
        service: 'gmail',
        auth: {
          user: emailUser,
          pass: emailPassword
        }
      });
      
      const mailOptions = {
        from: emailUser,
        to: feedbackEmail,
        subject: 'New Feedback from Specifys.ai',
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #0078d4;">üìù New Feedback Received</h2>
            <div style="background: #f5f5f5; padding: 20px; border-radius: 8px; margin: 20px 0;">
              <p><strong>üìß User Email:</strong> ${email || 'Not provided'}</p>
              <p><strong>üïí Time:</strong> ${new Date().toLocaleString('he-IL', { timeZone: 'Asia/Jerusalem' })}</p>
              <p><strong>üì± Source:</strong> Specifys.ai Try Page</p>
            </div>
            <div style="background: #fff; padding: 20px; border-left: 4px solid #0078d4; margin: 20px 0;">
              <h3 style="color: #333; margin-top: 0;">Feedback Content:</h3>
              <p style="color: #555; line-height: 1.6; white-space: pre-wrap;">${feedback}</p>
            </div>
            <hr style="border: none; border-top: 1px solid #eee; margin: 20px 0;">
            <p style="color: #666; font-size: 12px;">This email was automatically generated by the Specifys.ai feedback system.</p>
          </div>
        `
      };
      
      const info = await transporter.sendMail(mailOptions);
      console.log('‚úÖ Email sent successfully:', info.messageId);
      
    } else {
      // Fallback: log to console
      console.log('üìß Email configuration not available, logging to console instead');
      console.log('üìß Email would be sent to:', feedbackEmail || 'No feedback email configured');
      console.log('üìù Feedback content:', feedback);
      console.log('üë§ From user:', email || 'No email provided');
    }
    
  } catch (error) {
    console.error('‚ùå Error sending email:', error.message);
    // Don't fail the entire request if email fails
    console.log('üìß Email failed, but continuing with other operations...');
  }
}

// Function to save feedback to Google Sheets via Google Apps Script
async function saveToGoogleSheets(email, feedback, type, source) {
  try {
    // Use the Google Apps Script URL from config
    const googleAppsScriptUrl = config.googleAppsScriptUrl;
    
    const response = await fetch(googleAppsScriptUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: email || 'Not provided',
        feedback: feedback,
        type: type || 'general',
        source: source || 'specifys-ai-website'
      })
    });
    
    if (!response.ok) {
      throw new Error(`Google Apps Script error: ${response.status}`);
    }
    
    const result = await response.json();
    console.log('‚úÖ Feedback saved to Google Sheets via Apps Script:', result);
    
  } catch (error) {
    console.error('Error saving to Google Sheets via Apps Script:', error.message);
    // Don't fail the entire request if Sheets fails
    console.log('üìä Falling back to console logging');
    console.log('üìã Feedback Data:', {
      email: email || 'Not provided',
      feedback: feedback,
      type: type || 'general',
      source: source || 'specifys-ai-website',
      timestamp: new Date().toISOString()
    });
  }
}

// Clean API endpoint for generating specifications
app.post('/api/generate-spec', async (req, res) => {
  console.log('Received specification request:', req.body);
  const { userInput } = req.body;

  if (!userInput) {
    console.log('Error: User input is required');
    return res.status(400).json({ error: 'User input is required' });
  }

  try {
    // Forward request to the existing Cloudflare Worker
    const response = await fetch('https://newnocode.shalom-cohen-111.workers.dev', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ prompt: userInput }),
    });

    const data = await response.json();
    if (!response.ok) {
      console.log('Error from API:', data.error?.message);
      throw new Error(data.error?.message || 'Failed to fetch specification');
    }

    console.log('Successfully received specification from API');
    res.json({ specification: data.specification || 'No specification generated' });
  } catch (error) {
    console.error('Error fetching specification:', error.message);
    res.status(500).json({ error: 'Failed to generate specification' });
  }
});

console.log('Attempting to start server on port', port);
app.listen(port, () => {
  console.log(`üöÄ Server running on port ${port}`);
  console.log(`üìù Feedback endpoint available at: http://localhost:${port}/api/feedback`);
  console.log(`üîß Generate spec endpoint available at: http://localhost:${port}/api/generate-spec`);
  
  // Check configuration
  if (!process.env.EMAIL_USER || !process.env.EMAIL_APP_PASSWORD) {
    console.log('‚ö†Ô∏è  Email configuration not found. Set EMAIL_USER and EMAIL_APP_PASSWORD for email functionality.');
  }
  
  if (!process.env.GOOGLE_SHEETS_WEBHOOK_URL) {
    console.log('‚ö†Ô∏è  Google Sheets configuration not found. Set GOOGLE_SHEETS_WEBHOOK_URL for Sheets functionality.');
  }
});
