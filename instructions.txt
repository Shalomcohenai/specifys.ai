You are Cursor. Follow these steps one by one. 
Important: use the design and typography from the file template-test.html as the base template. 
Do not skip or merge steps; complete them sequentially. 
After each step, show me a short diff summary only (no full code dump) until I explicitly request full files.

---

### Step 1 — Create unified blog template
Goal:
- Build a Jekyll structure with layouts based on template-test.html design.
- Centralize typography, spacing, and colors into assets/css/blog.css (using CSS variables).
Deliverables:
1) _config.yml with minimal Jekyll setup (GitHub Pages compatible).
2) _layouts/
   - default.html (site chrome: head, header, footer from template-test)
   - post.html (for blog posts: title, meta, content, design consistent with template-test)
3) _includes/
   - head.html (SEO/meta/og placeholders)
   - header.html
   - footer.html
4) assets/css/blog.css (CSS variables + styles extracted from template-test.html)
5) blog/index.md (Jekyll listing page, initially empty)
Rules:
- Ensure design is cloned from template-test.html.
- Use semantic HTML elements (main/article/section/aside/figure).
- SEO-friendly structure.

---

### Step 2 — Apply unified CSS to existing blog.html
Goal:
- Link blog.html to assets/css/blog.css.
- Apply minimal structural classes from template-test only if needed.
- Keep all links intact, no href changes.
Acceptance:
- blog.html visually inherits the new unified design.

---

### Step 3 — Migrate existing posts to Markdown
Goal:
- Convert all files under /blog/*.html to /_posts/*.md.
- Use front-matter: title, description, date, tags, author, cover, canonical_url.
- Infer metadata from file content or filename.
- Content converted to Markdown, keep tables as HTML.
- File naming: YYYY-MM-DD-slug.md
Deliverable:
- First produce a migration plan mapping each old file → new file with metadata preview.
- Do not generate code until I approve.

---

### Step 4 — Enable new blog index
Goal:
- blog/index.md lists posts from /_posts.
- Show title (link), date, excerpt (~160 chars), optional cover.
- Use CSS from template-test-based stylesheet.
Acceptance:
- /blog/ works as new listing, but blog.html remains unchanged.

---

### Step 5 — Redirect legacy URLs
Goal:
- Old /blog/*.html URLs must 301 redirect to new post permalinks.
Tasks:
- Enable 'jekyll-redirect-from' plugin in _config.yml.
- Add redirect_from: ["/blog/old-file.html"] to each migrated post front-matter.

---

### Step 6 — Switch main blog listing
Goal:
- Update site nav to point to /blog/.
- blog.html becomes either a redirect page or remains for backlinks.
Acceptance:
- /blog/ is canonical, SEO-safe.

---

### Step 7 — New post creation workflow
Goal:
- Provide two options:
A) Node.js (or bash) script to generate new post with front-matter (title, description, date, tags, cover).
B) GitHub issue/PR template with required fields.
Rules:
- Standardize fields: title, description (≤160 chars), date ISO, tags array, cover path, author.
- Include checklist for images/SEO.
Deliverable:
- Show the workflow UX and filenames first, no code until I approve.

---

### Step 8 — Documentation for maintenance
Goal:
- Write README listing CSS variables (names + purpose).
- Document how to adjust typography/colors globally.
Acceptance:
- One central place (assets/css/blog.css) controls style across all posts.

---

Reminder:
- Use the design from template-test.html consistently.
- Always show me a short diff summary after each step.
- Do not paste entire code until I say "now show me code".
