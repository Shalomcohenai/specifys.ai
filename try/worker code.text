const OPENAI_API_KEY = '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'; // שמור על הסודיות של המפתח שלך

export default {
  async fetch(req) {
    const url = new URL(req.url);

    // ✅ תגובה לבקשת OPTIONS (preflight)
    if (req.method === "OPTIONS") {
      return new Response(null, {
        status: 204,
        headers: corsHeaders()
      });
    }

    // ✅ טיפול בבקשה ליצירת סיפור
    if (req.method === "POST" && url.pathname === "/api/story") {
      const { topic } = await req.json();

      const openaiRes = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${OPENAI_API_KEY}`
        },
        body: JSON.stringify({
          model: "gpt-3.5-turbo",
          stream: true,
          messages: [
            {
              role: "user",
              content: `כתוב סיפור של כ־5000 תווים בנושא הבא: ${topic}`
            }
          ]
        })
      });

      if (!openaiRes.ok) {
        return new Response("OpenAI request failed", {
          status: 500,
          headers: corsHeaders()
        });
      }

      const encoder = new TextEncoder();
      const decoder = new TextDecoder();

      const stream = new ReadableStream({
        async start(controller) {
          const reader = openaiRes.body.getReader();

          while (true) {
            const { done, value } = await reader.read();
            if (done) break;

            const chunk = decoder.decode(value);
            const lines = chunk.split("\n").filter(line => line.trim().startsWith("data:"));

            for (const line of lines) {
              const jsonStr = line.replace("data: ", "").trim();
              if (jsonStr === "[DONE]") {
                controller.close();
                return;
              }

              try {
                const json = JSON.parse(jsonStr);
                const content = json.choices?.[0]?.delta?.content;
                if (content) {
                  controller.enqueue(encoder.encode(content));
                }
              } catch (err) {
                console.error("Failed to parse:", jsonStr, err);
              }
            }
          }
        }
      });

      return new Response(stream, {
        headers: {
          ...corsHeaders(),
          "Content-Type": "text/plain; charset=utf-8",
          "Cache-Control": "no-cache"
        }
      });
    }

    return new Response("Not Found", {
      status: 404,
      headers: corsHeaders()
    });
  }
};

// ✅ פונקציה שמחזירה כותרות CORS תקינות
function corsHeaders() {
  return {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Methods": "POST, GET, OPTIONS",
    "Access-Control-Allow-Headers": "Content-Type, Authorization"
  };
}
